/**
 * The example checks for servuiceUUID on server during connecting and scanning..why?
 * Try removing nConnectedTags and replace arguments with counter, see if it's robust
 * TODO: write to doAdvertiseUUID characteristic on tag to "0" 48 ascii
 */

#include <BLEDevice.h>
#include "BLEScan.h"
#include <Arduino.h>
#include <M5StickC.h>
#include <stdlib.h>
int k =0;
// The remote service we wish to connect to. THE TAGS HAVE TO HAVE THIS ID
static BLEUUID serviceUUID1 0x181A
static BLEUUID serviceUUID2 0x181B
static BLEUUID serviceUUID3 0x181C
int nTick=0;
// The characteristic of the remote service we are interested in.
static BLEUUID charUUID("beb5483e-36e1-4688-b7f5-ea07361b26a8");
static BLEUUID TagIDUUID("722163a8-8aa7-4d93-b502-100777de4619");
static BLEUUID doAdvUUID("87e692ad-d2eb-4ef2-972d-f624f0ab7847");

#define LOOP_INTERVAL 200
#define nTags 3
#define SCAN_TIME 7
int nValidDevices=0;
bool isRoutineRunning=false;
int nConnectedTags = 0;
int counter=0;
bool isThisTagConnected[nTags];
bool isThisTagFound[nTags];
BLEAddress storedAddress[nTags];
static boolean allConnected = false;
static boolean isScanning = false;
static BLERemoteCharacteristic* pRemoteCharacteristic[nTags];
BLEAdvertisedDevice* myDevice;
BLEClient* pClientHandler[nTags];
BLEAdvertisedDevice* connectedDevice[nTags]; // do we even need this
static BLERemoteCharacteristic* pRemoteTagIDCharacteristic[nTags];
static BLERemoteCharacteristic* pRemoteTagdoAdvCharacteristic[nTags];
int WhichToPing=0;

int AddressToID(BLEAddress address){
  for(i++;i<nTags;i++){
    if(address.equals(storedAddress[i])){
      return i;
    }
  }
}


static void notifyCallback(

  BLERemoteCharacteristic* pBLERemoteCharacteristic,
  uint8_t* pData,
  size_t length,

  bool isNotify) {
    Serial.print("Notify callback for characteristic ");
    Serial.print(pBLERemoteCharacteristic->getUUID().toString().c_str());
    Serial.print(" of data length ");
    Serial.println(length);
    Serial.print("data: ");
    Serial.println((char*)pData);

}

    //keeptrack of how many tags are connected
class CounterCallback : public BLEClientCallbacks {

  void onConnect(BLEClient* pclient) {
    nConnectedTags +=1;
    Serial.println("onConnect");
  }

  void onDisconnect(BLEClient* pclient) {
    nConnectedTags +=-1;
    counter += -1;
    pclient->getService(serviceUUID)->getCharacteristic(TagIDUUID);
    Serial.println("onDisconnect, counter is now : ");
    Serial.println(counter);
    allConnected = false;
    pclient->getPeerAddress();

  }
};

class dummyCallback : public BLEClientCallbacks {

  void onConnect(BLEClient* pclient) {
    Serial.println("onConnectD");
  }

  void onDisconnect(BLEClient* pclient) {
    Serial.println("onDisconnectD, ");

  }
};
// server = TAG


bool connectToServer() {

    M5.Lcd.println("Forming a connection to ");
    M5.Lcd.println(myDevice->getAddress().toString().c_str());
        
    BLEClient*  pClient  = BLEDevice::createClient();
    Serial.println(" - Created client");
    pClient->setClientCallbacks(new CounterCallback());



    // Connect to the remote BLE Server.
    pClient->connect(myDevice);  // if you pass BLEAdvertisedDevice instead of address, it will be recognized type of peer device address (public or private)
    M5.Lcd.println(" - Connected to server");
    int IDTagNumber = atoi(pClient->getService(serviceUUID)->getCharacteristic(TagIDUUID)->readValue().c_str());
    if(isThisTagConnected[IDTagNumber]==true){
      pClient->disconnect();
      isRoutineRunning = false;
      return false;
    }
    storedAddress[IDTagNumber] = myDevice->getAddress();
    isThisTagConnected[IDTagNumber] = true;
    // Obtain a reference to the service we are after in the remote BLE server.
    BLERemoteService* pRemoteService = pClient->getService(serviceUUID);

    if (pRemoteService == nullptr) {
      M5.Lcd.println("Failed to find our service UUID on device: ");
      Serial.println(serviceUUID.toString().c_str());
      pClient->disconnect();
      return false;
    }

    Serial.println(" - Found our service");
    // Obtain a reference to the characteristic in the service of the remote BLE server.
    Serial.println("\n Found Tag was number : ");
    Serial.println(IDTagNumber);
    //store the variables
    pRemoteCharacteristic[IDTagNumber] = pRemoteService->getCharacteristic(charUUID);
    pRemoteTagIDCharacteristic[IDTagNumber] = pRemoteService->getCharacteristic(TagIDUUID);
    pRemoteTagdoAdvCharacteristic[IDTagNumber] = pRemoteService->getCharacteristic(doAdvUUID);
    connectedDevice[IDTagNumber] = myDevice;

    if (pRemoteCharacteristic[IDTagNumber] == nullptr) {
      M5.Lcd.println("Failed to find our characteristic UUID: ");
      Serial.println(charUUID.toString().c_str());
      pClient->disconnect();
      return false;
    }

    M5.Lcd.println(" - Found our characteristic");

    // Read the value of the characteristic.
    if(pRemoteCharacteristic[IDTagNumber]->canRead()) {
      std::string value = pRemoteCharacteristic[IDTagNumber]->readValue();
      Serial.println("The characteristic value was: ");
      Serial.println(value.c_str());
    }

    // ???

    if(pRemoteCharacteristic[IDTagNumber]->canNotify()) {
      pRemoteCharacteristic[IDTagNumber]->registerForNotify(notifyCallback);
    }
    //Once here assumption is connection is formed
    pRemoteTagdoAdvCharacteristic[IDTagNumber]->writeValue("0");
    counter += 1;
    isRoutineRunning=false;
    return true;
    

}

void startConnectRoutine(){
    if(isRoutineRunning == false){
        isRoutineRunning = true; 
        if(connectToServer()){
          //returns a true upon an established connection
          
          Serial.println(nConnectedTags);
          Serial.println(" are connected\n");
          if(nConnectedTags==nTags){
            
            Serial.println("Connection to all devices established");
            
          }
        }
    }
  }

/**
 * Scan for BLE servers and find the first one that advertises the service we are looking for.
 */
class MyAdvertisedDeviceCallbacks: public BLEAdvertisedDeviceCallbacks {
 /**
   * Called for each advertising BLE server.
   */

  void onResult(BLEAdvertisedDevice advertisingDevice) {
    Serial.println("Scanned BLE Device: ");
    Serial.println(advertisingDevice.toString().c_str());
    // We have found a device, let us now see if it contains the service we are looking for.
    if (advertisingDevice.haveServiceUUID() && advertisingDevice.isAdvertisingService(serviceUUID) && nConnectedTags < nTags) {
      
      if(nValidDevices == 0){
      validDevices[nValidDevices] = new BLEAdvertisedDevice(advertisingDevice);
      storedAddress[0] = myDevice->getAddress();
      nValidDevices++;
      
      } else {
        BLEAddress myad = advertisingDevice.getAddress();
        //Terminate if address is already stored;
        for(int i=0;i<nTags;i++){
          if(myad.equals(storedAddress[i])){
            return;
          }
        }
        validDevices = new BLEAdvertisedDevice(advertisingDevice);
        nValidDevices++;       
      }
      
      
    }     
  } // Found our server
   // onResult
}; // MyAdvertisedDeviceCallbacks

void startScan(){
  Serial.println("startScan() is called");
  if(isScanning==false) { 
  BLEScan* pBLEScan = BLEDevice::getScan();
  pBLEScan->setAdvertisedDeviceCallbacks(new MyAdvertisedDeviceCallbacks());
  pBLEScan->setInterval(1349);
  pBLEScan->setWindow(449);
  pBLEScan->setActiveScan(true);
  pBLEScan->start(SCAN_TIME, false);
  isScanning=true;
  return;
  }
}
void stopScan(){
  if(isScanning==true) { 
      BLEDevice::getScan()->stop();
      isScanning=false; }
}

void onButtonPress(int pressed){

  if(isThisTagConnected[pressed] == false || pRemoteTagIDCharacteristic[pressed] == nullptr){
    Serial.println("Device not connected / Wrong Device Connected");
    return;
  } 
  pRemoteCharacteristic[pressed]->writeValue("1");
  return;  
}

void setup() {
  for (int i=0;i<nTags;i++){
    isThisTagConnected[i] = false;
    isThisTagFound[i] = false;
    pClientHandler[i] = BLEDevice::createClient();
    pClientHandler[i]->setClientCallbacks(new CounterCallback());
    }

  M5.begin();
  Serial.begin(9600);
  Serial.println("Initializing...");
  isScanning=true;
  BLEDevice::init("ANCHOR");
  BLEScan* pBLEScan = BLEDevice::getScan();
  // Retrieve a Scanner and set the callback we want to use to be informed when we
  // have detected a new device.  Specify that we want active scanning and start the
  // scan to run for SCAN_TIME seconds (defined above)

  pBLEScan->setAdvertisedDeviceCallbacks(new MyAdvertisedDeviceCallbacks());

  //callback for advertising devices around.

  pBLEScan->setInterval(1349);
  pBLEScan->setWindow(449);
  pBLEScan->setActiveScan(true);
  pBLEScan->start(SCAN_TIME, false);
  

} // End of setup.


void loop() {

  nTick +=1;
  M5.update();

  if (M5.BtnA.isPressed()) {
    onButtonPress(WhichToPing);
    M5.Lcd.println("Button is pressed");
  } 
  for(int j=0;j<nTags;j++){
    if(isThisTagConnected[j] == true){
      Serial.printf("Tag %d is found\n",j);
    }

  }


  delay(LOOP_INTERVAL);

} 
